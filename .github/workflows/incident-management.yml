name: "Incident Lifecycle Management"

on:
  issues:
    types: [opened, labeled, closed]
  workflow_call:
    inputs:
      incident_type:
        required: true
        type: string
      severity:
        required: false
        type: string
        default: 'medium'
      description:
        required: false
        type: string
        default: ''

jobs:
  manage-incident:
    name: Handle Incident Lifecycle
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'incident') || github.event_name == 'workflow_call'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Auto-assign incident
      if: github.event.action == 'opened' || github.event_name == 'workflow_call'
      uses: actions/github-script@v7
      with:
        script: |
          const issue_number = context.issue?.number || context.payload.inputs?.incident_type;
          
          if (context.issue?.number) {
            // Auto-assign to repository owner and add incident team
            const assignees = ['trooths2002'];  // Repository owner
            
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: assignees
            });
            
            console.log(`Assigned incident ${context.issue.number} to: ${assignees.join(', ')}`);
          }

    - name: Set severity labels
      if: github.event.action == 'opened' || github.event_name == 'workflow_call'
      uses: actions/github-script@v7
      with:
        script: |
          const issue_number = context.issue?.number;
          if (!issue_number) return;
          
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number
          });
          
          const title = issue.data.title.toLowerCase();
          const body = issue.data.body?.toLowerCase() || '';
          
          // Determine severity based on keywords
          let severity = 'medium';
          let priority = 'P2';
          
          if (title.includes('critical') || title.includes('down') || title.includes('outage') || 
              body.includes('production') || body.includes('all users affected')) {
            severity = 'critical';
            priority = 'P0';
          } else if (title.includes('high') || title.includes('error') || title.includes('failing') ||
                     body.includes('multiple users') || body.includes('significant impact')) {
            severity = 'high'; 
            priority = 'P1';
          } else if (title.includes('low') || title.includes('minor') || title.includes('enhancement')) {
            severity = 'low';
            priority = 'P3';
          }
          
          // Add severity and priority labels
          const labels = [`severity: ${severity}`, `priority: ${priority}`, 'needs-triage'];
          
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            labels: labels
          });
          
          console.log(`Added labels: ${labels.join(', ')}`);

    - name: Create incident alert for critical issues
      if: |
        (github.event.action == 'opened' || github.event_name == 'workflow_call') && 
        (contains(github.event.issue.labels.*.name, 'severity: critical') || github.event.inputs.severity == 'critical')
      run: |
        echo "ðŸš¨ CRITICAL INCIDENT DETECTED ðŸš¨"
        echo "Issue: ${{ github.event.issue.html_url || 'workflow_call' }}"
        echo "Title: ${{ github.event.issue.title || github.event.inputs.incident_type }}"
        
        # Create incident alert summary
        cat << EOF > incident_alert.md
        # ðŸš¨ CRITICAL INCIDENT ALERT
        
        **Incident ID**: ${{ github.event.issue.number || github.run_id }}
        **Severity**: Critical
        **Time**: $(date -u)
        **Issue**: ${{ github.event.issue.html_url || 'Automated Detection' }}
        
        ## Details
        ${{ github.event.issue.body || github.event.inputs.description || 'Critical incident detected via automated monitoring' }}
        
        ## Immediate Actions Required
        - [ ] Acknowledge incident
        - [ ] Assess impact and scope
        - [ ] Implement immediate mitigation
        - [ ] Communicate to stakeholders
        - [ ] Begin root cause analysis
        
        ## Escalation
        - Repository Owner: @trooths2002
        - Email: temangroup1930@gmail.com
        
        **This is an automated alert from the incident management system.**
        EOF
        
        echo "Critical incident alert created"

    - name: Send Slack notification (simulate)
      if: |
        contains(github.event.issue.labels.*.name, 'severity: critical') || 
        github.event.inputs.severity == 'critical'
      run: |
        echo "ðŸ”” Would send Slack notification for critical incident:"
        echo "Channel: #incidents"
        echo "Message: Critical incident opened - ${{ github.event.issue.html_url || 'workflow call' }}"
        echo "Assignees notified: @trooths2002"
        # In a real implementation, this would use Slack webhooks:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"Critical incident: ${{ github.event.issue.html_url }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Update incident status on closure
      if: github.event.action == 'closed'
      uses: actions/github-script@v7
      with:
        script: |
          const issue_number = context.issue.number;
          
          // Add resolved label and remove active labels
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            labels: ['resolved']
          });
          
          // Remove active incident labels
          const labelsToRemove = ['needs-triage', 'in-progress', 'investigating'];
          for (const label of labelsToRemove) {
            try {
              await github.rest.issues.removeLabel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                name: label
              });
            } catch (error) {
              console.log(`Label ${label} not found or already removed`);
            }
          }
          
          // Add comment with resolution timestamp
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
            body: `ðŸŽ‰ **Incident Resolved**
            
            **Resolution Time**: ${new Date().toISOString()}
            **Total Duration**: ${new Date() - new Date(context.payload.issue.created_at)}ms
            
            This incident has been marked as resolved. A post-incident review should be conducted if this was a critical or high severity incident.
            
            *This is an automated message from the incident management system.*`
          });
          
          console.log(`Incident ${issue_number} marked as resolved`);

  # Incident escalation job for stale critical incidents  
  escalate-stale-incidents:
    name: Escalate Stale Critical Incidents
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Find stale critical incidents
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: 'incident,severity: critical',
            state: 'open'
          });
          
          const now = new Date();
          const staleThreshold = 2 * 60 * 60 * 1000; // 2 hours in milliseconds
          
          for (const issue of issues) {
            const createdAt = new Date(issue.created_at);
            const ageMs = now - createdAt;
            
            if (ageMs > staleThreshold) {
              // Escalate stale critical incident
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `ðŸš¨ **INCIDENT ESCALATION** ðŸš¨
                
                This critical incident has been open for ${Math.round(ageMs / (60 * 60 * 1000))} hours without resolution.
                
                **Escalating to:**
                - @trooths2002 (Repository Owner)
                - Email notification sent to: temangroup1930@gmail.com
                
                **Immediate action required.**
                
                *This is an automated escalation from the incident management system.*`
              });
              
              // Add escalation label
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                labels: ['escalated']
              });
              
              console.log(`Escalated stale critical incident #${issue.number}`);
            }
          }