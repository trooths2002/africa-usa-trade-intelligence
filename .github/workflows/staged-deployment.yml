name: "Staged Deployment Pipeline"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_production_deploy:
        description: 'Force production deployment (skip staging checks)'
        required: false
        type: boolean
        default: false

jobs:
  # First deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: staging
      url: ${{ vars.STAGING_URL || 'https://staging-africa-usa-trade-intelligence.onrender.com' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment..."
        echo "STAGING_DEPLOYMENT_ID=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        
        # This would typically involve actual deployment commands
        # For now, we'll simulate the deployment
        echo "‚úÖ Staging deployment completed"
    
    outputs:
      deployment_id: ${{ env.STAGING_DEPLOYMENT_ID }}

  # Run smoke tests on staging
  test-staging:
    name: Test Staging Environment
    needs: deploy-staging
    uses: ./.github/workflows/e2e-smoke.yml
    with:
      environment: 'staging'
      deployment_url: ${{ vars.STAGING_URL || 'https://staging-africa-usa-trade-intelligence.onrender.com' }}

  # Check orchestrator health on staging
  check-staging-health:
    name: Verify Staging Health
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    - name: Wait for staging to stabilize
      run: sleep 30

    - name: Check staging health via orchestrator
      run: |
        python -c "
        import requests
        import time
        import sys
        
        staging_url = '${{ vars.STAGING_URL || ''https://staging-africa-usa-trade-intelligence.onrender.com'' }}'
        health_checks = 0
        success_count = 0
        max_checks = 5
        
        print(f'Checking staging health at {staging_url}')
        
        for i in range(max_checks):
            try:
                response = requests.get(f'{staging_url}/health', timeout=30)
                health_checks += 1
                if response.status_code == 200:
                    success_count += 1
                    print(f'‚úÖ Health check {i+1}: OK')
                else:
                    print(f'‚ö†Ô∏è  Health check {i+1}: Status {response.status_code}')
                time.sleep(10)
            except Exception as e:
                print(f'‚ùå Health check {i+1}: Failed - {e}')
                time.sleep(10)
        
        success_rate = success_count / max_checks if max_checks > 0 else 0
        print(f'Staging health success rate: {success_rate:.2%}')
        
        if success_rate < 0.8:  # Require 80% success rate
            print('‚ùå Staging environment not healthy enough for production deployment')
            sys.exit(1)
        
        print('‚úÖ Staging environment is healthy and ready for production')
        "

  # Gate for production deployment
  production-gate:
    name: Production Deployment Gate
    needs: [test-staging, check-staging-health]
    runs-on: ubuntu-latest
    environment: 
      name: production-gate
    
    steps:
    - name: Deployment Gate Check
      run: |
        echo "üö¶ All staging checks passed. Ready for production deployment."
        echo "‚úÖ E2E smoke tests: PASSED"
        echo "‚úÖ Staging health checks: PASSED" 
        echo "Production deployment is approved to proceed."

  # Deploy to production only after all gates pass
  deploy-production:
    name: Deploy to Production
    needs: production-gate
    runs-on: ubuntu-latest
    if: success() || github.event.inputs.force_production_deploy == 'true'
    environment:
      name: production
      url: ${{ vars.DEPLOYED_URL || 'https://africa-usa-trade-intelligence.onrender.com' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment..."
        echo "PRODUCTION_DEPLOYMENT_ID=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
        
        # This would typically involve actual deployment commands
        # For now, we'll simulate the deployment
        echo "‚úÖ Production deployment completed"
    
    - name: Verify Production Deployment  
      run: |
        echo "Verifying production deployment..."
        sleep 30  # Allow time for deployment to stabilize
        
        # Run a quick health check
        python -c "
        import requests
        url = '${{ vars.DEPLOYED_URL || ''https://africa-usa-trade-intelligence.onrender.com'' }}/health'
        try:
            response = requests.get(url, timeout=30)
            if response.status_code == 200:
                print('‚úÖ Production deployment verified')
            else:
                print(f'‚ö†Ô∏è  Production health check returned {response.status_code}')
        except Exception as e:
            print(f'‚ùå Production verification failed: {e}')
            raise
        "

  # Run final smoke tests on production
  test-production:
    name: Verify Production with Smoke Tests
    needs: deploy-production
    uses: ./.github/workflows/e2e-smoke.yml
    with:
      environment: 'production'
      deployment_url: ${{ vars.DEPLOYED_URL || 'https://africa-usa-trade-intelligence.onrender.com' }}